{"version":3,"sources":["../node_modules/@porschehn/navigation/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","pages/PerformancePage.tsx","routes.ts","pages/CollectionPage.tsx","pages/FormsPage.tsx","pages/PhnHeaderPage.tsx","pages/UtilitiesPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","SELECTABLE_ELEMENTS","SELECTABLE_COUNTS","routes","name","path","component","useState","showHeadline","setShowHeadline","activePage","setActivePage","isDisabled","setIsDisabled","size","variant","className","disabled","onClick","prev","href","role","data-testid","totalItemsCount","itemsPerPage","onPageChange","event","detail","page","select","setSelect","checkBox","setCheckBox","radioButton","setRadioButton","textField","setTextField","handleTextField","target","value","direction","onChange","handleSelect","label","hideLabel","type","onInput","slot","aria-invalid","element","setElement","count","setCount","shouldRender","setShouldRender","key","children","checked","style","marginTop","Array","from","i","createElement","env","position","left","right","paddingTop","text","medium","width","height","background","color","brand","App","align","route","to","exact","find","x","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","applyPolyfills","definePorscheNavigation"],"mappings":"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","file":"static/js/main.dcbcc42d.chunk.js","sourcesContent":["var map = {\n\t\"./phn-back-button_43.entry.js\": [\n\t\t398,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 393;\nmodule.exports = webpackAsyncContext;","import {\n  PCheckboxWrapper,\n  PText,\n  PButton,\n  PSelectWrapper,\n  PGrid,\n  PGridItem,\n  PHeadline,\n} from '@porsche-design-system/components-react';\nimport React, { ChangeEvent, useState } from 'react';\n\ntype SelectableElement = 'text' | 'checkbox' | 'button';\n\nconst SELECTABLE_ELEMENTS: SelectableElement[] = ['text', 'checkbox', 'button'];\nconst SELECTABLE_COUNTS = [25, 50, 100];\n\nexport const PerformancePage = () => {\n  const [element, setElement] = useState<SelectableElement>('text');\n  const [count, setCount] = useState(25);\n  const [shouldRender, setShouldRender] = useState(true);\n\n  const onElementChange = (e: ChangeEvent<HTMLSelectElement>): void => setElement(e.target.value as SelectableElement);\n  const onCountChange = (e: ChangeEvent<HTMLSelectElement>): void => setCount(+e.target.value);\n  const onShouldRenderChange = (e: ChangeEvent<HTMLInputElement>): void => setShouldRender(e.target.checked);\n\n  const createElement = (count: number) => {\n    const children = 'Lorem Ipsum ' + count;\n    switch (element) {\n      case 'checkbox':\n        return (\n          <PCheckboxWrapper key={count} label={children}>\n            <input type=\"checkbox\" />\n          </PCheckboxWrapper>\n        );\n      case 'button':\n        return <PButton key={count} variant=\"primary\" children={children} />;\n      case 'text':\n        return <PText key={count} children={children} />;\n    }\n  };\n\n  return (\n    <>\n      <PGrid>\n        <PGridItem size=\"12\">\n          <PHeadline variant=\"headline-4\">Choose Element and Count</PHeadline>\n        </PGridItem>\n        <PGridItem size=\"4\">\n          <PSelectWrapper>\n            <select value={element} onChange={onElementChange}>\n              {SELECTABLE_ELEMENTS.map((value) => (\n                <option key={value} value={value} children={value} />\n              ))}\n            </select>\n          </PSelectWrapper>\n        </PGridItem>\n        <PGridItem size=\"4\">\n          <PSelectWrapper>\n            <select value={count} onChange={onCountChange}>\n              {SELECTABLE_COUNTS.map((value) => (\n                <option key={value} value={value} children={value} />\n              ))}\n            </select>\n          </PSelectWrapper>\n        </PGridItem>\n        <PGridItem size=\"4\">\n          <PCheckboxWrapper label=\"Render\">\n            <input type=\"checkbox\" onChange={onShouldRenderChange} checked={shouldRender}/>\n          </PCheckboxWrapper>\n        </PGridItem>\n      </PGrid>\n      <PGrid style={{ marginTop: '2rem' }}>\n        <PGridItem size=\"12\">{shouldRender && Array.from(Array(count)).map((value, i) => createElement(i))}</PGridItem>\n      </PGrid>\n    </>\n  );\n};\n","import { RouteProps } from 'react-router-dom';\nimport * as fromPages from './pages';\n\nexport type RouteType = RouteProps & {\n  name: string;\n  path: string; // override string | string[]\n};\n\nexport const routes: RouteType[] = [\n  {\n    name: 'Collection',\n    path: '/collection',\n    component: fromPages.CollectionPage,\n  },\n  {\n    name: 'Forms',\n    path: '/forms',\n    component: fromPages.FormsPage,\n  },\n  {\n    name: 'Performance',\n    path: '/performance',\n    component: fromPages.PerformancePage,\n  },\n  {\n    name: 'Phn Header',\n    path: '/phn-header',\n    component: fromPages.PhnHeaderPage,\n  },\n  {\n    name: 'Utilities',\n    path: '/utilities',\n    component: fromPages.UtilitiesPage,\n  },\n];\n","import React, { useState } from 'react';\nimport {\n  PButton,\n  PButtonPure,\n  PDivider,\n  PGrid,\n  PGridItem,\n  PHeadline,\n  PIcon,\n  PLink,\n  PLinkPure,\n  PPagination,\n  PSpinner,\n} from '@porsche-design-system/components-react';\n\nexport const CollectionPage = (): JSX.Element => {\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [activePage, setActivePage] = useState(1);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const handleSubmit = (): void => {\n    setShowHeadline(true);\n    setIsDisabled((prev) => !prev);\n  };\n\n  const handleDismiss = (): void => {\n    setShowHeadline(false);\n    setIsDisabled((prev) => !prev);\n  };\n\n  const handleActivePage = (event: CustomEvent): void => {\n    setActivePage(event.detail.page);\n  };\n\n  return (\n    <PGrid>\n      <PGridItem size=\"12\">\n        <PHeadline variant=\"headline-4\">Buttons</PHeadline>\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PDivider className=\"divider\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PButton disabled={isDisabled} onClick={handleSubmit}>\n          Submit\n        </PButton>\n      </PGridItem>\n      <PGridItem size=\"12\" className=\"contentWrapperSmall\">\n        <PButtonPure disabled={!isDisabled} onClick={handleDismiss}>\n          Dismiss\n        </PButtonPure>\n      </PGridItem>\n      {showHeadline && (\n        <PGridItem size=\"12\" className=\"contentWrapperSmall\">\n          {/*To illustrate the mock procedure during the tests the buttons insert/dismiss a headline*/}\n          <PHeadline variant=\"headline-4\">Headline appears through Button click</PHeadline>\n        </PGridItem>\n      )}\n      <PGridItem size=\"12\">\n        <PDivider className=\"divider\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PHeadline variant=\"headline-4\">Links</PHeadline>\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PDivider className=\"divider\" />\n      </PGridItem>\n      {/*Example of all Link variation which are provided by the Porsche Design System*/}\n      <PGridItem size=\"12\">\n        <a href=\"https://www.porsche.com\" className=\"removeLinkStyle\">\n          <PLink>porsche.com</PLink>\n        </a>\n      </PGridItem>\n      <PGridItem size=\"12\" className=\"contentWrapperBig\">\n        <a href=\"#hashTest\" className=\"removeLinkStyle\">\n          <PLinkPure>Test PLinkPure</PLinkPure>\n        </a>\n        <PLinkPure href=\"#propHashTest\">Test propHash</PLinkPure>\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PDivider className=\"divider\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PHeadline variant=\"headline-4\">Icons</PHeadline>\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PDivider className=\"divider\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PSpinner size=\"small\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PIcon size=\"medium\" name=\"highway\" role=\"img\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PDivider className=\"divider\" />\n      </PGridItem>\n      <PGridItem size=\"12\">\n        {/* Simple usage of PPagination. By linking state to activePage, we can listen to the pageChange event of the component */}\n        <PHeadline variant=\"headline-4\">You are on Page {activePage} Page</PHeadline>\n      </PGridItem>\n      <PGridItem size=\"12\">\n        <PPagination\n          data-testid=\"pagination\"\n          totalItemsCount={11}\n          itemsPerPage={3}\n          activePage={activePage}\n          onPageChange={handleActivePage}\n        />\n      </PGridItem>\n    </PGrid>\n  );\n};\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport {\n  PCheckboxWrapper,\n  PDivider,\n  PFlex,\n  PFlexItem,\n  PHeadline,\n  PRadioButtonWrapper,\n  PSelectWrapper,\n  PTextareaWrapper,\n  PTextFieldWrapper,\n} from '@porsche-design-system/components-react';\n\nexport const FormsPage = (): JSX.Element => {\n  const [select, setSelect] = useState('Change this Headline by selecting');\n  const [checkBox, setCheckBox] = useState(false);\n  const [radioButton, setRadioButton] = useState(false);\n  const [textField, setTextField] = useState('Change this Headline by typing');\n\n  const handleSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setSelect(e.target.value);\n  };\n\n  const handleCheckBox = (e: FormEvent<HTMLInputElement>): void => {\n    if (checkBox) {\n      setCheckBox(false);\n    } else {\n      setCheckBox(true);\n    }\n  };\n\n  const handleRadioButton = (e: FormEvent<HTMLInputElement>): void => {\n    setRadioButton(true);\n  };\n\n  const handleTextField = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTextField(e.target.value);\n  };\n\n  return (\n    <PFlex direction=\"column\">\n      <PFlexItem>\n        <PHeadline variant=\"headline-3\">Form examples</PHeadline>\n      </PFlexItem>\n      <PFlexItem>\n        <PDivider className=\"divider\" />\n      </PFlexItem>\n      <PFlexItem>\n        {/*To illustrate the mock procedure during the tests the selected value is displayed in the headline */}\n        <PHeadline variant=\"headline-4\">{select}</PHeadline>\n        <form>\n          <PSelectWrapper>\n            <select data-testid=\"select\" value={select} onChange={(e) => handleSelect(e)}>\n              <option value=\"Headline A\">A</option>\n              <option value=\"Headline B\">B</option>\n              <option value=\"Headline C\">C</option>\n            </select>\n          </PSelectWrapper>\n        </form>\n      </PFlexItem>\n      <PFlexItem>\n        <PDivider className=\"divider\" />\n      </PFlexItem>\n      <PFlexItem>\n        {/*Checking the Checkbox makes the headline appear*/}\n        {checkBox ? <PHeadline variant=\"headline-4\">Checkbox Works</PHeadline> : ''}\n        <PCheckboxWrapper label=\"Some label\" hideLabel={false}>\n          <input data-testid=\"checkbox\" type=\"checkbox\" name=\"TestBox\" onInput={(e) => handleCheckBox(e)} />\n        </PCheckboxWrapper>\n      </PFlexItem>\n      <PFlexItem className=\"contentWrapperSmall\">\n        {/* Clicking the Radiobutton makes the headline appear*/}\n        {radioButton ? <PHeadline variant=\"headline-4\">Radio Works</PHeadline> : ''}\n        <PRadioButtonWrapper label=\"Some label\" hideLabel={false}>\n          <input data-testid=\"radiobutton\" type=\"radio\" name=\"RadioButton\" onInput={(e) => handleRadioButton(e)} />\n        </PRadioButtonWrapper>\n      </PFlexItem>\n      <PFlexItem>\n        <PDivider className=\"divider\" />\n      </PFlexItem>\n      <PFlexItem>\n        <form>\n          <PTextareaWrapper label=\"Test TextArea\" hideLabel={false}>\n            <textarea name=\"Testarea\"></textarea>\n          </PTextareaWrapper>\n        </form>\n      </PFlexItem>\n      <PFlexItem className=\"contentWrapperSmall\">\n        {/*The headline changes according to the text field input*/}\n        <PHeadline variant=\"headline-4\">{textField}</PHeadline>\n        <PTextFieldWrapper label=\"Test TextField\" hideLabel={false}>\n          <input data-testid=\"input\" type=\"text\" name=\"Textfield\" onChange={(e) => handleTextField(e)} />\n        </PTextFieldWrapper>\n      </PFlexItem>\n      <PFlexItem className=\"contentWrapperSmall\">\n        <form>\n          <PFlexItem>\n            <PTextFieldWrapper>\n              {/*Example of slotted links*/}\n              <span slot=\"label\">\n                Some label with a{' '}\n                <a data-testid=\"slottedHref\" href=\"https://designsystem.porsche.com\">\n                  Slotted Link\n                </a>\n                .\n              </span>\n              <input\n                data-testid=\"slottedInput\"\n                type=\"text\"\n                aria-invalid={true}\n                name=\"some-name\"\n                onChange={(e) => handleTextField(e)}\n              />\n            </PTextFieldWrapper>\n          </PFlexItem>\n        </form>\n      </PFlexItem>\n    </PFlex>\n  );\n};\n","import React from 'react';\nimport { PButton, PIcon, PLinkPure } from '@porsche-design-system/components-react';\n\nexport const PhnHeaderPage = (): JSX.Element => (\n  <>\n    <phn-header env=\"preview\" style={{ position: 'absolute', left: 0, right: 0 }} />\n\n    <div style={{ paddingTop: 150 }}>\n      <div>\n        <PButton>Some PButton</PButton>\n      </div>\n      <div>\n        <PLinkPure>Some PLinkPure</PLinkPure>\n      </div>\n      <div>\n        <PIcon name=\"configurate\" />\n        <PIcon name=\"compare\" />\n        <PIcon name=\"search\" />\n      </div>\n    </div>\n  </>\n);\n","import React from 'react';\nimport { color, text } from '@porsche-design-system/utilities';\nimport './UtilitiesPage.scss';\n\n/**\n * Test site to see if utilities package works\n */\nexport const UtilitiesPage = (): JSX.Element => {\n  return (\n    <>\n      <div style={text.medium}>JS utilities</div>\n      <div style={{ width: 50, height: 50, background: color.brand }} />\n      <div className=\"textSizeMedium\">Scss utilities</div>\n      <div style={{ width: 50, height: 50 }} className=\"backgroundColorPds\" />\n    </>\n  );\n};\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\nimport { PGrid, PGridItem, PHeadline, PDivider, PLinkPure } from '@porsche-design-system/components-react';\nimport './App.css';\nimport { routes } from './routes';\n\nexport const App = (): JSX.Element => {\n  return (\n    <Router>\n      <div className=\"pageLayout\">\n        <PGrid>\n          <PGridItem size={12}>\n            <PHeadline variant=\"headline-2\" align=\"center\">\n              Example usage of the Porsche-Design-System React\n            </PHeadline>\n          </PGridItem>\n          <PGridItem size={12}>\n            <PDivider className=\"divider\" />\n          </PGridItem>\n          <PGridItem size={12}>\n            {routes.map((route) => (\n              <PLinkPure key={route.path}>\n                <Link to={route.path} children={route.name} />\n              </PLinkPure>\n            ))}\n          </PGridItem>\n          <PGridItem size={12}>\n            <PDivider className=\"divider\" />\n          </PGridItem>\n        </PGrid>\n        <Switch>\n          {routes.map((route) => (\n            <Route key={route.path} {...route} />\n          ))}\n          <Route path=\"/\" exact>\n            <Redirect to={routes.find((x) => x.name === 'Collection')?.path!} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { applyPolyfills, defineCustomElements as definePorscheNavigation } from '@porschehn/navigation/loader';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\napplyPolyfills().then(() => {\n  definePorscheNavigation(window);\n});\n"],"sourceRoot":""}